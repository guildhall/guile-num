(use-modules (gsl gsl-function))
(use-modules (gsl gsl-roots))
(use-modules (gsl gsl-errno))
(use-modules (ice-9 format))

(define (cout . args)
  (apply format (current-output-port) args))

(define (quadratic a b c)
  (lambda (x) (+ (* (+ (* a x) b) x) c)))
(define (diff-quadratic a b c)
  (lambda (x) (+ (* 2 a x) b)))

(let ((a 1.0)
      (b 0.0)
      (c -5.0))
  (let ((f (quadratic a b c))
	(max-iter 100)
	(x-lo 0.0)
	(x-hi 5.0)
	(expected (sqrt 5)))
    (let ((F (gsl-function-alloc f))
	  (s (gsl-root-fsolver-alloc (gsl-root-fsolver-brent))))
      (gsl-root-fsolver-set s F x-lo x-hi)

      (cout "using ~A method\n" (gsl-root-fsolver-name s))
      (cout "~5A [~9A, ~9A] ~9A ~10A ~9A\n"
	    "iter" "lower" "upper" "root" "err" "err(est)")

      (let loop ((iter 1))
	(gsl-root-fsolver-iterate s)
	(let* ((r (gsl-root-fsolver-root s))
	       (x-lo (gsl-root-fsolver-x-lower s))
	       (x-hi (gsl-root-fsolver-x-upper s))
	       (status (gsl-root-test-interval x-lo x-hi 0 0.001)))
	  (if (= status (GSL-SUCCESS))
	      (cout "Converged:\n"))
	  (cout "~5D [~9F, ~9F] ~9F ~+10F ~9F\n"
		iter x-lo x-hi r (- r expected) (- x-hi x-lo))
	  (if (and (= status (GSL-CONTINUE))
		   (< iter max-iter))
	      (loop (+ iter 1)))))
      (gsl-root-fsolver-free s)
      (gsl-function-free F))))

(newline)

(let ((a 1.0)
      (b 0.0)
      (c -5.0))
  (let ((f (quadratic a b c))
	(df (diff-quadratic a b c))
	(max-iter 100)
	(x0 0.0)
	(x 5.0)
	(expected (sqrt 5)))
    (let ((F (gsl-function-fdf-alloc f df))
	  (s (gsl-root-fdfsolver-alloc (gsl-root-fdfsolver-newton))))
      (gsl-root-fdfsolver-set s F x)

      (cout "using ~A method\n" (gsl-root-fdfsolver-name s))
      (cout "~5A ~10A ~10A ~10A\n"
	    "iter" "root" "err" "err(est)")

      (let loop ((iter 1))
	(gsl-root-fdfsolver-iterate s)
	(set! x0 x)
	(set! x (gsl-root-fdfsolver-root s))
	(let ((status (gsl-root-test-delta x x0 0 0.001)))
	  (if (= status (GSL-SUCCESS))
	      (cout "Converged:\n"))
	  (cout "~5D ~10F ~+10F ~10F\n"
		iter x (- x expected) (- x x0))
	  (if (and (= status (GSL-CONTINUE))
		   (< iter max-iter))
	      (loop (+ iter 1)))))

      (gsl-root-fdfsolver-free s)
      (gsl-function-fdf-free F))))
